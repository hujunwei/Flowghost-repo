<div class="panel panel-default">
	<div class="panel-heading">
		<h1 class="panel-title"><center>Create a new course</center></h1>
	</div>
	<div id="form-course-form" class="panel-body">
		<%= form_for(@course) do |f| %>
		<% if @course.errors.any? %>
		<div class="alert alert-danger">
			<h2><%= pluralize(@course.errors.count, "error") %> prohibited this course from being saved:</h2>
			<ul>
				<% @course.errors.full_messages.each do |msg| %>
				<li><%= msg %></li>
				<% end %>
			</ul>

		</div>
		<% end %>

		<div class="form-page">
			<br>
			<center>
				<h1> Welcome! </h1>
				<h2> Creating a course is as easy as following these steps! </h2>
				<h4> 1. Give the course a name </h4>
				<h4> 2. Name the assignments. </h4>
				<h4> 3. Tag the assignments. </h4>
				<h4> 4. Enter student emails. </h4>
				<input class="btn btn-primary fg-button-prev" type="button" value="Previous" disabled>
				<input class="btn btn-primary fg-button-next" type="button" value="Next">
				<input class="btn btn-primary fg-inline" type="submit" value="Submit" disabled>
			</center>
		</div>



		<div class="form-page">
			<div>
				<%= f.text_field :name,{:class=>"form-control",:placeholder=>"Course Name"}  %>  
			</div>
			<br>
			<center>
				<input class="btn btn-primary fg-button-prev" type="button" value="Previous">
				<input class="btn btn-primary fg-button-next" type="button" value="Next">
				<input class="btn btn-primary fg-inline" type="submit" value="Submit" disabled>
			</center>
		</div>

		<!-- page for node input -->
		<div class="form-page">
			<br>
			<p> First, tell us what assignemnts you're planning to offer and how many points each one is worth. </p>
			<p> Don't worry. You can always make changes later! </p>
			<br>
			<div class="panel panel-default">
				<div class="panel-body">
					<table class="table table-striped table-hover">
						<colgroup>
						<col style="width:5%"/>
						<col style="width:70%"/>
						<col style="width:10%"/>
						<col style="width:15%"/>
					</colgroup>
					<thead>
						<tr>
							<th class="fg-centered">#</th>
							<th class="fg-centered">Assignment Name</th>
							<th class="fg-centered">Points Possible</th>
							<th class="fg-centered">Status</th>
						</tr>
					</thead>
					<tbody id="form-nodes-table">
						<tr>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<%= text_field_tag "course[assignments_attributes]", @course.assignments.to_json, {:value => @course.assignments.to_json, :class=>"form-control", :id=>"form-nodes-hidden", :type=>"hidden"} %>
		<center>
			<input class="btn btn-primary fg-button-prev" type="button" value="Previous">
			<input class="btn btn-primary fg-button-next" type="button" value="Next">
			<input class="btn btn-primary fg-inline" type="submit" value="Submit" disabled>
		</center>
	</div>

	<!-- page for tag input -->
	<div class="form-page">
		<div class="container">
			<div class="row">
				<p> Create tags for your assignment! </p>
				<p> Tags can refer to learning objectives (e.g. "critical thinking), assignment types (e.g. "exams" and "memos"), or anything else that students may want to focus on. </p>
				<p> After you create each tag, hit TAB on your keyboard to enter the tag into the tag list. </p>
				<p> When you are done creating your list, tag assignments by clicking on one of the tags you have created and then clicking on one of the corresponding assignments. </p>
				<p> Each assignment can have multiple tags. </p>
				<div class="col-md-2">
					<ul id="form-tags-list" class="list-group">
						<li class="list-group-item fg-sidenav-header"><b>Tag List</b></li>
						<li class="list-group-item"><input id="fg-add-tag" class="form-control" type="text" placeholder="Enter new tag"></li>
					</ul>

					<div>
						<%= text_field_tag "course[tags_attributes]", @course.tags.to_json, {:value => @course.tags.to_json, :class=>"form-control",:id=>"form-tags-hidden", :type=>"hidden"} %>
					</div>


				</div>
				<div class="col-md-10">
					<table style="width:95%" class="table table-bordered">
						<thead>
							<tr>
								<th class="fg-centered">Assignment</th>
								<th class="fg-centered">All tags</th>
							</tr>
						</thead>
						<tbody id="form-tags-table">
							<tr>
							</tr>
						</table> 
					</div>
				</div>
			</div> 
			<center>
				<input class="btn btn-primary fg-button-prev" type="button" value="Previous">
				<input class="btn btn-primary fg-button-next" type="button" value="Next">
				<input class="btn btn-primary fg-inline" type="submit" value="Submit" disabled>
			</center>
		</div>

		<!-- page for student input -->
		<div class="form-page"> 
			<div class="panel panel-default">
				<div class="panel-body">
					<p>Last, enter your students' email addresses.</p>
					<p> You can enter and edit individual  email addresses below. </p>
					<p> Or, you can copy and paste a list of email addresses by clicking ENTER LIST. </p>
					<table class="table table-striped table-hover">
						<colgroup>
						<col style="width:5%"/>
						<col style="width:80%"/>
						<col style="width:15%"/>
					</colgroup>
					<thead>
						<tr>
							<th class="fg-centered">#</th>
							<th class="fg-centered">Email</th>
							<th class="fg-centered">Status</th>
						</tr>
					</thead>
					<tbody id="form-students-table">
						<tr>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
		<%= text_field_tag "course[students_attributes]", @course.students.to_json, {:value => @course.students.to_json, :class=>"form-control", :id=>"form-students-hidden", :type=>"hidden"} %>
		<center>
			<input class="btn btn-primary fg-button-prev" type="button" value="Previous">
			<input class="btn btn-primary fg-button-next" type="button" value="Next" disabled>
			<input class="btn btn-primary fg-inline" type="submit" value="Submit" name="commit">
			<button class="btn btn-primary fg-float-right" data-toggle="modal" data-target="#form-students-modal"><span class="glyphicon glyphicon-list"></span> Enter List</button>
		</center>
	</div>



	<!-- Popup window for entering a list of email addresses -->

	<div id="form-students-modal" class="modal fade" tabindex="-1"> <!--style="position: absolute; top: 0px; left: 0px; width: 1000px"-->
		<div class="modal-dialog" style="top: 0px; left: 0px">
			<div class="modal-content">
				<div class="modal-header">
					<input class="close fg-delete" data-dismiss="modal" type="image" value="&#10006;"></input>
					<h4 class="modal-title">Input line-separated email list</h4>
				</div>
				<div class="modal-body">
					<textarea id="form-students-modal-input" class="form-control" rows="20"></textarea>  
				</div>
				<div class="modal-footer">
					<input id="fg-submit-student-modal" class="btn btn-primary" type="button" value="Submit" data-dismiss="modal">
				</div>
			</div>
		</div>
	</div> 



	<% end %>

</div>


<div class="panel-body">
	<hr>
	<!-- new CSV feature-->
	<center>
		<p> Or, you could simplify your assignments input by uploading a CSV file! </p>
		<!--input class="btn btn-success btn-lg" type="submit" value="Upload a CSV file"-->
		<%= button_to 'Upload a CSV', courses_addInfoForNewCourse_path, {:class => "btn btn-success btn-lg", :method => "get"} %> 
	</center>
</div>



<div id="panel-footer" class="panel-footer">
	<center>Step <div class="fg-inline" id="pageNum">1</div> of 4</center></div>
</div>

</div> 

<script>

<!-- number of students and nodes so far -->
numStudents = 0;
numNodes = 0;

<!-- array of student JSON objects that is sent to controller -->
studentJSONArray = [];

<!-- JSON object with assignment names as keys and JSON arrays of tag names as values -->
nodeTagJSON = {};

<!-- array of node JSON objects that is sent to controller -->
nodeJSONArray = [];

<!-- array of tag JSON objects that is sent to controller -->
tagJSONArray = [];

<!-- JSON array of all unique tag/assignment/email names -->
uniqueTagJSONArray = [];
uniqueNodeJSONArray = [];
uniqueEmailJSONArray = [];

<!-- current active tag in tagging form -->
activeTag = null;

<!-- set classes for divs upon doc ready -->
<!-- also need to hide some elements on startup -->
$(document).ready(function() {
	$(".form-page:gt(0)").hide();
	autopopulate();
});

<!-- function to autopopulate existing data if editing course -->
function autopopulate() {
	var studentString = $("#form-students-hidden").val();
	studentJSONArray = JSON.parse(studentString);
	var nodeString = $("#form-nodes-hidden").val();
	console.log("autopopulate: nodeString is "+nodeString);
	nodeJSONArray = JSON.parse(nodeString);
	var tagString = $("#form-tags-hidden").val();
	tagJSONArray = JSON.parse(tagString);

	for (var i=0; i<nodeJSONArray.length; i++) {
		var currentNode = nodeJSONArray[i];
		addNodeLine();
		$("#form-nodes-table").children(":last").find(".fg-input").val(currentNode.points_possible)
		.parent().prev().find("input").val(currentNode.name)
		.parent().prev().find(".fg-existing-id").html(currentNode.id);
		var currentTagArray = currentNode.tagnames.split(",");
		console.log("FOR NODETAGJSON: currentNode.tagnames is "+ currentNode.tagnames);
		var currentStrippedTagArray = [];
		for (var j=0; j<currentTagArray.length; j++) {
			var currentTag = currentTagArray[j];
			var addedTag = {};
			addedTag.name = currentTag;
			console.log("FOR NODETAGJSON: addedTag.name is "+ addedTag.name);
	//addedTag.id = currentTag.id;
	if (uniqueTagJSONArray.indexOf(currentTag) <= -1) {
		uniqueTagJSONArray.push(currentTag);
		console.log("autopopulate: added "+currentTag+" to uniqueTagJSONArray; it is now "+ uniqueTagJSONArray.toString());
		var $newTagListItem = $("<li/>", {
			"class": "list-group-item",
		}).append($("<div/>", {
			"class": "fg-tag-item fg-inline",
			html: addedTag.name
		})).append($("<span/>", {
			"class": "glyphicon glyphicon-remove fg-delete",
		}));
	      //.append($("<div/>", {
		//"class": "fg-existing-id",
		//html: addedTag.id
		//}));
$newTagListItem.find(".fg-existing-id").hide();
$("#form-tags-list").children(":last").before($newTagListItem);
console.log("autopopulate: tag list item "+addedTag.name+" added!");
} else {
	console.log("autopopulate: tag " +addedTag.name+" not added to tag list because it's in uniqueTagJSONArray!!!!!");
}
currentStrippedTagArray.push(addedTag);
}
nodeTagJSON[currentNode.name] = currentStrippedTagArray;

$("<tr/>").appendTo("#form-tags-table")
.append($("<td/>", {
	"class": "fg-centered fg-tag-select",
	html: currentNode.name,
})).append($("<td/>", {
	"class": "fg-centered",
	html: "",
}));
}
updateTagInterface();
for (var i=0; i<studentJSONArray.length; i++) {
	var currentStudent = studentJSONArray[i];
	addStudentLine();
	$("#form-students-table").children(":last").find(".fg-input").val(currentStudent.email)
	.parent().prev().find(".fg-existing-id").html(currentStudent.id);
}
$(".fg-input").blur();
if (numNodes == 0) { addNodeLine(); }
if (numStudents == 0) { addStudentLine(); }
}

<!-- function to move to prev page -->
$(".form-page").on("click", ".fg-button-prev", function() {
	$(this).parent().parent().prev().show();
	$(this).parent().parent().hide();
	var htmlString = $("#pageNum").html();
	$("#pageNum").html(parseInt(htmlString)-1);
});

<!-- function to move to next page -->
$(".form-page").on("click", ".fg-button-next", function() {
	$(this).parent().parent().next().show();
	$(this).parent().parent().hide();
	var htmlString = $("#pageNum").html();
	$("#pageNum").html(parseInt(htmlString)+1);
});

<!-- add our own submit handler to run before default handler -->
$("#new_course").on("submit", "", function() {
	updateHiddenEmailField();
	updateHiddenNodesField();
});

<!-- functions for assignment form (page 2) -->

function addNodeLine() {
	numNodes += 1;
	var $newNodeTr = $("<tr/>");
	$newNodeTr.append($("<td/>", {
		html: numNodes.toString(),
		"class": "fg-centered"
	})).append($("<td/>", {
		"class": "fg-vertical-middle"
	})).append($("<td/>", {
		"class": "fg-vertical-middle"
	})).append($("<td/>", {
		"class": "fg-status-neutral",
		html: "EMPTY"
	}));
	$newNodeTr.children(":first")
	.append($("<div/>", {
		"class": "fg-existing-id",
	}))
	.next()
	.append($("<input>", {
		"class": "form-control",
		type: "text",
		placeholder: "Assignment name"
	})).append($("<div/>", {
		"class": "fg-display"
	})).next().append($("<input>", {
		"class": "form-control fg-input",
		type: "text",
		placeholder: "Points"
	})).append($("<div/>", {
		"class": "fg-display"
	})).append($("<span/>", {
		"class": "glyphicon glyphicon-remove fg-delete",
		tabIndex: -1
	}));
	$("#form-nodes-table").append($newNodeTr);
	$newNodeTr.children().find(".fg-display, .fg-delete, .fg-existing-id").hide();
}

<!-- function called to edit node line -->
<!-- editNode -->
$("#form-nodes-table").on("click", ".fg-display", function() {
	$(this).parent().parent().find("td, :eq(1)").find(".fg-display").hide()
	.prev().attr("type", "text")
	.parent().next().find(".fg-input").attr("type", "text")
	.next().hide()
	.next().hide();
	$(this).prev().focus();
});

<!-- function called to delete node line -->
<!-- deleteNode -->
$("#form-nodes-table").on("click", ".fg-delete", function() {
	$(this).parent().parent().nextAll().children(":first-child").each(function() {
		var htmlString = $(this).html();
		$(this).html(parseInt(htmlString)-1);
	});
	var nodeName = $(this).parent().prev().find(".fg-display").html();
	$(this).parent().parent().remove();
	numNodes--;
	uniqueNodeJSONArray.splice(uniqueNodeJSONArray.indexOf(nodeName), 1);
	delete nodeTagJSON[nodeName];
	$("#form-tags-table").children().find(":first-child").each(function() {
		if ($(this).html() == nodeName) {
			$(this).parent().remove();
			return false;
		}
	});
});

<!-- function called on input blur for node line -->
<!-- onNodeBlur -->
$("#form-nodes-table").on("blur", ".fg-input", function() {
	var newName = $(this).parent().prev().find("input").prop("value");
	var oldName = $(this).parent().prev().find(".fg-display").html();
	var pts = $(this).prop("value");
	var valid = (uniqueNodeJSONArray.indexOf(newName) == -1);
	valid = (valid && verifyNodeParams(newName, pts));
	if (!valid) {
		if (newName == "" && pts == "") {
			if ($(this).parent().parent().index() != numNodes) {
				$(this).parent().children(".fg-delete").click();
				return;
			} else {
				$(this).parent().parent().find(":last").removeClass("fg-status-bad").removeClass("fg-status-good").addClass("fg-status-neutral").html("EMPTY");
				return;
			}
		}
		$(this).parent().parent().find(":last").removeClass("fg-status-neutral").removeClass("fg-status-good").addClass("fg-status-bad").html("INVALID");
		return;
	}
	var fixedPts = Math.floor(parseInt(pts.trim()));
	$(this).attr("type", "hidden")
	.next().html(fixedPts).show()
	.next().show()
	.parent().prev().children(":first").attr("type", "hidden")
	.next().html(newName).show()
	.parent().parent().children(":last").removeClass("fg-status-neutral").removeClass("fg-status-bad").addClass("fg-status-good").html("OK");
	if ($(this).parent().parent().index() == numNodes) {
		addNodeLine();
	}
	if (nodeTagJSON[oldName] != undefined && nodeTagJSON[newName] == undefined) {
		nodeTagJSON[newName] = nodeTagJSON[oldName];
		delete nodeTagJSON[oldName];
		$("#form-tags-table").children(":gt(0)").find(":first-child").each(function() {
			if ($(this).html() == oldName) {
				$(this).html(newName);
				return false;
			}
		});
	}
	if (nodeTagJSON[newName] == undefined) {
		$("<tr/>").appendTo("#form-tags-table")
		.append($("<td/>", {
			"class": "fg-centered fg-tag-select",
			html: newName,
		})).append($("<td/>", {
			"class": "fg-centered",
			html: "",
		}));
		nodeTagJSON[newName] = [];
	}
	$("#form-nodes-table").children(":last").children(":eq(1)").find(":first").focus();
	if (oldName != "") {
		uniqueNodeJSONArray.splice(uniqueNodeJSONArray.indexOf(oldName), 1);
	}
	uniqueNodeJSONArray.push(newName);
	updateHiddenNodesField();
});

function verifyNodeParams(name, tpp) {
	if (name.trim() == "" || tpp.trim() == "") {
		return false;
	}
	if (isNaN(tpp.trim())) {
		return false;
	} else {
		if (parseInt(tpp.trim()) <= 0) {
			return false;
		}
	}
	return true;
}

function updateHiddenNodesField() {
	nodeJSONArray = [];
	$("#form-nodes-table").children().each(function(index) {
		if (index == 0) {
			return;
		}
		var valid = ($(this).find(".fg-status-good").length == 1);
		if (valid) {
			var thisObj = {};
			thisObj.name = $(this).children(":eq(1)").find(".fg-display").html();
			thisObj.points_possible = $(this).children(":eq(2)").find(".fg-display").html();
				  //TODO TAGNAMES
				  var tagNamesString = "";
				  var beginning =1;
				  for (var thisTagNumber in nodeTagJSON[thisObj.name]) {
				  	if (beginning == 0) {
				  		tagNamesString = tagNamesString + ","+nodeTagJSON[thisObj.name][thisTagNumber].name;
				  	} else {
				  		tagNamesString = tagNamesString + nodeTagJSON[thisObj.name][thisTagNumber].name;
				  		beginning = 0;
				  	}
				  	console.log("updateHiddenNodesField: tagNamesString is "+ tagNamesString);
				  }

				  thisObj.tagnames = tagNamesString;

				  var existingId = $(this).find(".fg-existing-id").html();
				  if (existingId != "") {
				  	thisObj.id = parseInt(existingId);
				  }
				  nodeJSONArray.push(thisObj);
				}
			});
updateHiddenTagsField();
$("#form-nodes-hidden").prop("value", JSON.stringify(nodeJSONArray));
}

<!-- jquery functions for tag form -->

<!-- add a new tag to the taglist -->
<!-- addTag -->
$("#fg-add-tag").on("blur", function() {
	var tagName = $(this).prop("value").trim();
	console.log("addTag: tagName is "+tagName);

			      //var tagId = 0;
			      //var existingId = $(this).find(".fg-existing-id").html();
			      //if (existingId != "") {
				//	tagId = parseInt(existingId);
				//}
				if (tagName == "") {
					return;
				}
				if (uniqueTagJSONArray.indexOf(tagName) >= 0) {
					return;
				}
				var $newTagListItem = $("<li/>", {
					"class": "list-group-item",
				}).append($("<div/>", {
					"class": "fg-tag-item fg-inline",
					html: tagName,
				})).append($("<span/>", {
					"class": "glyphicon glyphicon-remove fg-delete",
				}));
				  //.append($("<div/>", {
				    //"class": "fg-existing-id",
				    //	html: tagId
				    //	}));
$newTagListItem.find(".fg-existing-id").hide();
$(this).parent().parent().children(":last").before($newTagListItem);
uniqueTagJSONArray.push(tagName); 
$(this).prop("value", "");
$(this).focus();

updateHiddenTagsField();

});

<!-- delete tag from taglist -->
<!-- deleteTag -->
$("#form-tags-list").on("click", ".fg-delete", function() {
	var $tag = $(this).prev().html();
	$(this).parent().remove();
	console.log("deleteTag: before deleting from tags table; $tag is "+$tag);
	$("#form-tags-table").children(":gt(0)").each(function() {
		var node = $(this).find(":first-child").html();
		console.log("deleteTag: node is "+node.toString());
		currentArray = nodeTagJSON[node];
		console.log("deleteTag: currentArray is "+currentArray);
		var tagExists = 0;
		var tagIndex = -1;
		for (var thisNum in currentArray) {
			if (currentArray[thisNum].name == $tag) {
				tagExists = 1;
				tagIndex = thisNum;
			}
		}

		if (tagExists) {
			currentArray.splice(tagIndex, 1);
			var stringToDisplay = "";
			var beginning = 1;
			for (var thisNum in currentArray) {
				if (beginning == 1) {
					stringToDisplay = stringToDisplay + currentArray[thisNum].name;
					beginning == 0;
				} else {
					stringToDisplay = stringToDisplay + ","+ currentArray[thisNum].name;
				}
			}
			nodeTagJSON[node] = currentArray;
			updateHiddenTagsField();

			$(this).find(":last-child").html(stringToDisplay);
			console.log("deleteTag: tags table updated!");
		} else {
			console.log("deleteTag: CANNOT FIND $TAG IN CURRENTARRAY!!!");
		}
	});
if (activeTag == $tag) {
	activeTag = null;
}
uniqueTagJSONArray.splice(uniqueTagJSONArray.indexOf($tag), 1);
});

<!-- clicked on tag in taglist -->
<!-- onTagClick -->
$("#form-tags-list").on("click", ".fg-tag-item", function() {
	var tag = $(this).html();
	var id = $(this).siblings(":last-child").html();
	var newActive = {};
	newActive.name = tag;
	if (id != "") {
		newActive.id = id;
		console.log("line 498: newActive.id is "+id);
	}
	$(this).parent().addClass("active").siblings().removeClass("active");
	activeTag = newActive;
});

<!-- when a box is clicked in tag input, tag the assignment -->
$("#form-tags-table").on("click", ".fg-tag-select", function() {
	if (activeTag == null) {
		return;
	}
	var nodeName = $(this).html();
	var exists = false;
	for (var i=0; i<nodeTagJSON[nodeName].length; i++) {
		if (nodeTagJSON[nodeName][i].name == activeTag.name) {
			exists = true;
			break;
		}
	}
	if (!exists) {
		nodeTagJSON[nodeName].push(activeTag);
		console.log("********* new tag added to nodeTagJSON!!!!!!!!!!!!!!!! form-tags-table function; activeTag.name = "+activeTag.name);
	} else {
		nodeTagJSON[nodeName].splice(nodeTagJSON[nodeName].indexOf(activeTag), 1);
	}
	var tagList = [];
	var tagArray = nodeTagJSON[nodeName];
	for (var i=0; i<tagArray.length; i++) {
		tagList.push(tagArray[i].name);
	}
	$(this).next().html(tagList.toString());
	updateHiddenNodesField();
	updateHiddenTagsField();

});

<!-- update the taglist for an assignment in the tag interface -->
function updateTagInterface() {
	$("#form-tags-table").find(".fg-tag-select").each(function() {
		var tagList = [];
		var tagArray = nodeTagJSON[$(this).html()];
		for (var i=0; i<tagArray.length; i++) {
			tagList.push(tagArray[i].name);
		}
		$(this).next().html(tagList.toString());
	});
}




function updateHiddenTagsField() {
	tagJSONArray = [];
	<!-- TODO GO THROUGH NODETAGJSON AND ADD EVERY TAG TO TAG JSON ARRAY -->
	for (var assignmentName in nodeTagJSON) {
		for (var thisTagNumber in nodeTagJSON[assignmentName]) {
			var newTag = {};
			newTag.name = nodeTagJSON[assignmentName][thisTagNumber].name;
			console.log("&& updateHiddenTags: iterating through nodeTagJSON: assignmentName is "+assignmentName+"; newTag.name = "+ newTag.name);
			var existed = 0;
			for (var thisExistingTag in tagJSONArray) {
				console.log("&& updateHiddenTags: third loop: iterating through tagJSONArray; thisExistingTag = "+thisExistingTag);
				if (!thisExistingTag) {
					console.log("&& updateHiddenTags: 3rd loop: thisExistingTag DNE; EXIT");
					return;
				}
				if (thisExistingTag.name == newTag.name) {
					console.log("&& thisExistingTag.name is "+ thisExistingTag.name+" and it equals to newTag.name");
					var assignmentArray = thisExistingTag.assignmentnames.split(",");
					assignmentArray.push(assignmentName);
					thisExistingTag.assignmentnames = assignmentArray.join();
					existed = 1;
				}
			}
			if (existed == 0) {
				var assignmentNames = [assignmentName];
				newTag.assignmentnames = assignmentNames.join();
			}

			<!-- DECIDED THAT WE DONOT NEED TO SEND THE ID; adding assignment id is not possible bc it is assigned by rails -->
			tagJSONArray.push(newTag);
		}
	}
	$("#form-tags-hidden").prop("value", JSON.stringify(tagJSONArray));

}













<!-- jquery functions for student form -->

<!-- add a new line to student email form -->
function addStudentLine() {
	numStudents += 1;
	var $newStudentTr = $("<tr/>");
	$("<td/>", {
		html: numStudents.toString(),
		"class": "fg-centered"
	}).append($("<div/>", {
		class: "fg-existing-id"
	})).appendTo($newStudentTr);
	var $studentEmailInput = $("<input>", {
		"class": "form-control fg-input",
		type: "text",
		placeholder: "Email address"
	});
	var $studentEmailDisp = $("<div/>", {
		"class": "fg-display"
	});
	var $studentDelete = $("<span/>", {
		"class": "glyphicon glyphicon-remove fg-delete",
		tabIndex: -1
	});
	var $studentEmailTd= $("<td/>", {
		"class": "fg-vertical-middle"
	});
	(($studentEmailTd.append($studentEmailInput)).append($studentEmailDisp)).append($studentDelete);
	$studentEmailTd.appendTo($newStudentTr);
	$("<td/>", {
		"class": "fg-status-neutral",
		html: "EMPTY"
	}).appendTo($newStudentTr);
	$newStudentTr.find(".fg-display, .fg-delete, .fg-existing-id").hide();
	$("#form-students-table").append($newStudentTr);
}

<!-- function called to delete student line -->
<!-- deleteStudent -->
$("#form-students-table").on("click", ".fg-delete", function() {
	var email = $(this).prev().html();
	$(this).parent().parent().nextAll().children(":first-child").each(function() {
		var htmlString = $(this).html();
		$(this).html(parseInt(htmlString)-1);
	});
	$(this).parent().parent().remove();
	uniqueEmailJSONArray.splice(uniqueEmailJSONArray.indexOf(email), 1);
	numStudents--;
});

<!-- function called upon clicking on display to edit student -->
<!-- editStudent -->
$("#form-students-table").on("click", ".fg-display", function() {
	$(this).hide()
	.prev().attr("type", "text").end()
	.next().hide().end();
	$(this).prev().focus();
});

<!-- function called when student input blurs and loses focus -->
<!-- onStudentBlur -->
$("#form-students-table").on("blur", ".fg-input", function() {
	var email = $(this).prop("value");
	var oldEmail = $(this).parent().find(".fg-display").html();
	var valid = (uniqueEmailJSONArray.indexOf(email) == -1);
	valid = (valid && verifyEmail(email));
	if (!valid) {
		if (email.trim() == "" && $(this).parent().parent().index() != numStudents) {
			$(this).parent().find(".fg-delete").click();
			return;
		}
		if (email.trim() == "") {
			$(this).parent().parent().find(":last").removeClass("fg-status-good").removeClass("fg-status-bad").addClass("fg-status-neutral").html("EMPTY");
		} else {
			$(this).parent().parent().find(":last").removeClass("fg-status-good").removeClass("fg-status-neutral").addClass("fg-status-bad").html("INVALID");
		}
		return;
	}
	$(this).attr("type", "hidden")
	.next().html(email).show()
	.next(":last").show()
	.parent().parent().find(":last").removeClass("fg-status-neutral").removeClass("fg-status-bad").addClass("fg-status-good").html("OK");
	if ($(this).parent().parent().index() == numStudents) {
		addStudentLine();
	}
	$("#form-students-table").children().eq(numStudents).children().eq(1).find(".fg-input").focus();
	if (oldEmail != "") {
		uniqueEmailJSONArray.splice(uniqueEmailJSONArray.indexOf(oldEmail), 1);
	}
	uniqueEmailJSONArray.push(email);
	updateHiddenEmailField();
});

<!-- check that email has valid form -->
function verifyEmail(email) {
	email = email.trim();
	var atpos = email.indexOf("@");
	var dotpos = email.lastIndexOf(".");
	if (atpos < 1 || dotpos < atpos + 2 || dotpos + 2 >= email.length) {
		return false;
	}
	return true;
}

<!-- update hidden email input field with table data -->
function updateHiddenEmailField() {
	studentJSONArray = [];
	$("#form-students-table").children(":gt(0)").each(function(index) {
		var valid = ($(this).find(".fg-status-good").length == 1);
		if (valid) {
			var studentObject = {};
			studentObject.email = $(this).find(".fg-display").html();
			var existingId = $(this).find(".fg-existing-id").html();
			if (existingId != "") {
				studentObject.id = parseInt(existingId);
			}
			studentJSONArray.push(studentObject);
		}
	});
	$("#form-students-hidden").prop("value", JSON.stringify(studentJSONArray));
}

<!-- parse email list in modal -->
$("#fg-submit-student-modal").on("click", function() {
	var rawString = $("#form-students-modal-input").prop("value");
	rawString = rawString.trim();
	var regExp = new RegExp("\n", "g");
	rawString = rawString.replace(regExp, ',');
	var emailArray = rawString.split(',');
	emailArray.forEach(function(element, index, array) {
		var email = element.trim();
		if (email.trim() == "") {
			return;
		}
		$currentTd = $("#form-students-table").children(":last").children(":eq(1)");
		$currentTd.children().eq(0).prop("value", email);
		var valid = verifyEmail(email);
		if (!valid) {
			$currentTd.next().removeClass("fg-status-good").removeClass("fg-status-neutral").addClass("fg-status-bad").html("INVALID");
		} else {
			$currentTd.find(":first-child").attr("type", "hidden")
			.next().html(email).show()
			.next().attr("type", "image")
			.parent().next().removeClass("fg-status-neutral").removeClass("fg-status-bad").addClass("fg-status-good").html("OK");
		}
		addStudentLine();
	});
	$("form-students-modal-input").prop("value", "");
});

</script>
